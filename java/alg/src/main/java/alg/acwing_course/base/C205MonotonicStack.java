package alg.acwing_course.base;

/**
 * 单调栈
 * @author will
 * @since 2024/4/9
 */
public class C205MonotonicStack {
    
    public static void main(String[] args) {
    
    }
    
    /**
     * 给定一个序列，求每一个数离它最近的且比它小的数在哪个位置。
     * 利用一个递减的栈
     * 【1， 100， 2， 1， 5】
     *
     * 对于数组中任意连续的两个数字，若 a1 >= a2，a1 和 a2 所对应的前面最近比它小的数已经求
     * 出来了，那么求 a3 前面最近比它小的数有两种情况，
     * （1） 若 a3 > a2，则 a3 的前面最近比它小的数是 a2；
     * （2） 若 a3 <= a2，因 a2 <= a1，所以 a3 <= a1，因此 a1 不可能是 a3 的答案；
     * 所以这里的 a1 是任何情况下都不是 a3 的答案。
     * 以上这种推理，若 a1 是多个 >= a2 的数字也成立。
     * 所以，对于数组中任意不连续的连个数字，若 ai >= aj 则 ai 是一个可以被删掉的数字。
     */
    
    
}
